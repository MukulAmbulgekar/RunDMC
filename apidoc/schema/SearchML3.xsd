<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2002-2014 MarkLogic Corporation.  All Rights Reserved. -->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:s="http://www.outsideinsdk.com/xmlns/searchml/3.3" targetNamespace="http://www.outsideinsdk.com/xmlns/searchml/3.3" elementFormDefault="qualified" xml:lang="en">
	<xsd:annotation>
		<xsd:documentation>
			SearchML Schema
			
 Copyright (c) 2008, Oracle. All rights reserved.  
			All rights reserved.

			This work is protected by United States and international copyright
			laws and contains certain trade secret information. All use of this
			work is governed by the terms of agreements between Oracle
			and its licensees or potential licensees. Disclosure of the contents
			is prohibited.
		</xsd:documentation>
	</xsd:annotation>
	<xsd:element name="searchml">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					The root element of a SearchML document (the {@term XML Document Element}).
				</xsd:documentation>
			</xsd:annotation>
			<xsd:sequence>
				<xsd:element name="document" type="s:document"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="document">
		<xsd:annotation>
			<xsd:documentation>
				Document elements represent &quot;whole&quot; documents, acting as a container for both {@link doc_content} and
				{@link doc_properties} elements.  They may be encountered at the root level, representing the entire document,
				or as children of other elements.  As a child of {@link doc_content}, documents are fully contained sub-documents,
				such as archived files in a zip document.  As a child of {@link p} (paragraph), documents are embedded
				sub-documents, such as a WordPerfect Graphic embedded in a WordPerfect file.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="object" type="s:object"/>
			<xsd:element name="error" type="s:error"/>
			<xsd:element name="doc_properties" type="s:doc_properties"/>
			<xsd:element name="doc_content" type="s:doc_content"/>
		</xsd:choice>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					The name of the original encoding format for this document.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="doc_properties">
		<xsd:annotation>
			<xsd:documentation>
				Doc_properties act as a container for {@link doc_property} elements.  They, along with {@link doc_content} elements
				are used to separate the content and properties portions of a {@link document}.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="doc_property" type="s:doc_property" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="object">
		<xsd:annotation>
			<xsd:documentation>
				Sub-document object information.  This element provides a type and paramter data
				to be used in addressing sub-documents.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="type" type="xsd:hexBinary" use="required"/>
		<xsd:attribute name="param1" type="xsd:hexBinary" use="required"/>
		<xsd:attribute name="param2" type="xsd:hexBinary" use="required"/>
		<xsd:attribute name="param3" type="xsd:hexBinary" use="required"/>
		<xsd:attribute name="param4" type="xsd:hexBinary" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="error" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
				Error code and description.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="code" type="xsd:hexBinary" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="doc_property" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
				Doc_property elements contain the text of document meta data (such as document title, see below).

				When the type attribute is "xmp_metadata" the doc_property element will contain XMP metadata.
				XMP metadata can appear within either the “adobe:ns:meta/” or the rdf namespace so both are allowed.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:any namespace="adobe:ns:meta/ http://www.w3.org/1999/02/22-rdf-syntax-ns#" processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
	Common values for the doc_property types:&lt;br&gt;&lt;br&gt;

	comment, keyword, last_saved_by,&lt;br&gt;
	primary_author, subject, title, abstract,&lt;br&gt;
	account, address, attachments,&lt;br&gt;
	authorization, backup_date,&lt;br&gt;
	bill_to, blind_copy, carbon_copy,&lt;br&gt;
	category, checked_by, client,&lt;br&gt;
	completed_date, character_count,&lt;br&gt;
	page_count, word_count, creation_date,&lt;br&gt;
	department, destination, disposition,&lt;br&gt;
	division, edit_minutes, editor, forward_to,&lt;br&gt;
	group, language, last_print_date,&lt;br&gt;
	mail_stop, matter, office, operator,&lt;br&gt;
	owner, project, publisher, purpose,&lt;br&gt;
	received_from, recorded_by,&lt;br&gt;
	recorded_date, reference, revision_date,&lt;br&gt;
	revision_notes, revision_number,&lt;br&gt;
	secondary_author, section, security,&lt;br&gt;
	source, status, doc_type, typist,&lt;br&gt;
	version_date, version_notes, version_number,&lt;br&gt;
	base_file_location, manager, company
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="doc_content">
		<xsd:annotation>
			<xsd:documentation>
				Doc_content acts as a container for a documents {@link p paragraphs}, or for other {@link document documents}.
				They, along with {@link doc_properties} elements are used to separate the content and properties portions of
				a {@link document}.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="p" type="s:p"/>
			<xsd:element name="ocr" type="s:ocr"/>
			<xsd:element name="document" type="s:document"/>
			<xsd:element name="doc_content" type="s:doc_content"/>
			<xsd:element name="sheet" type="s:sheet"/>
			<xsd:element name="cell" type="s:cell"/>
			<xsd:element name="note" type="s:note"/>
		</xsd:choice>
		<xsd:attribute name="type" type="s:EDocContentType" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Describes what kind, or the intent of, the container that this doc_content is.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="id" type="xsd:ID" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					If the &apos;id&apos; attribute is present, it will match a &apos;note&apos; element indicating the type of annotation associated with
					the doc_content.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="cell">
		<xsd:annotation>
			<xsd:documentation>
				A cell represents row and column data in a SS.  The &apos;start&apos; attribute denotes either the location of the cell or
				the starting location of a merged range of cells.  The &apos;end&apos; element if present denotes the end of a merged
				range of cells.  Letters are used for column designations, and numbers are used for rows i.e. A1 represents
				row 1 column 1, and ABC731 represents row 731, column 731.  4,294,967,294 rows and 4,294,967,294
				columns can be tracked.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="p" type="s:p"/>
			<xsd:element name="ocr" type="s:ocr"/>
			<xsd:element name="document" type="s:document"/>
			<xsd:element name="doc_content" type="s:doc_content"/>
			<xsd:element name="note" type="s:note"/>
		</xsd:choice>
		<xsd:attribute name="start" type="xsd:string" use="required">
		</xsd:attribute>
		<xsd:attribute name="end" type="xsd:string" use="optional">
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="ocr" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
                         	                   Each ocr element represents a single paragraph of text gathered using
                                                   optical character recognition.  This text is never countable.
                                </xsd:documentation>
		</xsd:annotation>
	</xsd:complexType>
	<xsd:complexType name="generated" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="r" type="s:r">
				<xsd:annotation>
					<xsd:documentation>
						Generated Text.  Generated text comes from such items as date,
						time, or number formatting.  It was not actually text in the input
						document, and does not count towards offset.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="record" type="s:record"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="record">
		<xsd:annotation>
			<xsd:documentation>
			Archive record.  record represents an entry in an archive and contains an archived sub-document.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="p" type="s:p"/>
			<xsd:element name="ocr" type="s:ocr"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="p" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
				p, or paragraph elements contain the actual text content of a document.  They may also contain elements for
				tagging sections of that content, (see {@link begin_tag} and {@link end_tag}), or for delineating sub content
				or sub documents.  p elements also contain attributes describing the style of the paragraph.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="begin_tag" type="s:begin_tag"/>
			<xsd:element name="end_tag" type="s:end_tag"/>
			<xsd:element name="document" type="s:document"/>
			<xsd:element name="doc_content" type="s:doc_content"/>
			<xsd:element name="doc_property" type="s:doc_property"/>
			<xsd:element name="r" type="s:r"/>
			<xsd:element name="offset" type="s:offset">
				<xsd:annotation>
					<xsd:documentation>
                        Text offset.  The offset specified flows until the end of the
                        enclosing p or the next specified offset.
                    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="generated" type="s:generated"/>
			<xsd:element name="record" type="s:record"/>
			<xsd:element name="unmapped" type="s:unmapped"/>
			<xsd:element name="bookmark" type="s:bookmark"/>
		</xsd:choice>
		<xsd:attribute name="s" type="xsd:string" use="optional"/>
		<xsd:attribute name="spacing" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Line spacing.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="h" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Height
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ri" type="xsd:integer" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Right indent.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="li" type="xsd:integer" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Left indent.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="fli" type="xsd:integer" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					First line indent.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="offset" type="xsd:nonNegativeInteger" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Text offset.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="oce" type="xsd:hexBinary" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Original Character Encoding.  If oce is requested it will appear early
				in the document, and will only appear on either a paragraph or run when
				it changes.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="r" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="offset" type="s:offset">
				<xsd:annotation>
					<xsd:documentation>
						Text offset.  The offset specified flows out from the parent run
						influencing all following content and runs until the end of the
						enclosing p or the next specified offset.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="begin_tag" type="s:begin_tag"/>
			<xsd:element name="end_tag" type="s:end_tag"/>
		</xsd:choice>
		<xsd:attribute name="b" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Bold.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="i" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Italic.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="u" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Underline.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="du" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Double Underline.  While this attribute can be set to on or off,
					there is no compelling reason to set it to off since off is the
					default value of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="outline" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Outline.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="hidden" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Hidden text.  Optionally, SearchML can be prevented from producing hidden text.  If content
					has been both hidden and deleted and SearchML related options indicate that either deleted or
					hidden text but not both should be displayed, then the text is NOT displayed.  This behavior
					was designed to emulate common word processing programs such as Microsoft Word.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="so" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Strike Out.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="smallcaps" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Small Caps.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="allcaps" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					All Caps.  While this attribute can be set to on or off, there is no
					compelling reason to set it to off since off is the default value
					of the parent
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="oce" type="xsd:hexBinary" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Original Character Encoding.  If oce is requested it will appear early
				in the document, and will only appear on either a paragraph or run when
				it changes.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="unknown_mapping" type="s:EOnOff" use="optional"/>
		<xsd:attribute name="del" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Text that has been deleted using a revision.  Optionally, SearchML can be prevented from producing
					deleted text.  If content has been both hidden and deleted and SearchML related options indicate that
					either deleted or hidden text but not both should be displayed, then the text is NOT displayed.  This
					behavior was designed to emulate common word processing programs such as Microsoft Word.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="add" type="s:EOnOff" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Text that has been added using a revision.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="offset">
		<xsd:annotation>
			<xsd:documentation>
				Text offset.  The offset specified flows out from the parent run
				influencing all following content and runs until the end of the
				enclosing p or the next specified offset.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="value" type="xsd:nonNegativeInteger" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="begin_tag">
		<xsd:annotation>
			<xsd:documentation>
				Begins a &quot;tagged&quot; area of textual content, the interpretation of which depends on the value of this elements
				&quot;type&quot; attribute.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="type" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Defines the intent, or purpose of this &quot;tagged&quot; area of textual content.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="url" type="xsd:anyURI" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					The url attribute will only appear on tags with a type of hyperlink.  It represents the address
					associated with the hyperlink.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="bookmark" type="xsd:IDREF" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="end_tag">
		<xsd:annotation>
			<xsd:documentation>
				Ends a &quot;tagged&quot; area of textual content, matching the most recent {@link begin_tag} with an identical
				&quot;type&quot; attribute.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="type" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Defines the intent, or purpose of this &quot;tagged&quot; area of textual content.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:simpleType name="EOnOff">
		<xsd:annotation>
			<xsd:documentation>
				Defines possible values of &quot;on&quot; or &quot;off&quot;.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="on"/>
			<xsd:enumeration value="off"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EDocContentType">
		<xsd:annotation>
			<xsd:documentation>
				Defines the possible values for the &quot;type&quot; of content a {@link doc_content} container element may contain.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="body">
				<xsd:annotation>
					<xsd:documentation>
						Normal document content.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="sub_doc"/>
			<xsd:enumeration value="frame"/>
			<xsd:enumeration value="text_box"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="sheet">
		<xsd:annotation>
			<xsd:documentation>
				Sheet Element.  This element represents information related to sheets.  The name of a
				worksheet in a spreadsheet, for example.  If the name attribute is missing, this
				indicates that a sheet is present, but no name information was available.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Provides the name of the sheet if a name was available.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:simpleType name="ENoteType">
		<xsd:annotation>
			<xsd:documentation>
				Defines the possible types of a note element.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="footnote"/>
			<xsd:enumeration value="endnote"/>
			<xsd:enumeration value="annotation"/>
			<xsd:enumeration value="note"/>
			<xsd:enumeration value="comment"/>
			<xsd:enumeration value="slide_note"/>
			<xsd:enumeration value="unknown"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="note">
		<xsd:annotation>
			<xsd:documentation>
				Note Element.  Conceptually, a note represents an annotation to a document&apos;s primary
				text.  In practice, a note element provides the type of annotation and an identifier
				which will match an id attribute on a doc_content element which will actually contain
				the content of the annotation.  For example:

				<xsd:note type="footnote" id="x40000001"/>
				<xsd:doc_content type="sub_doc" id="x40000001">
					<xsd:p>This is a footnote.</xsd:p>
				</xsd:doc_content>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="type" type="s:ENoteType" use="required"/>
		<xsd:attribute name="id" type="xsd:IDREF" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="unmapped" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
				Unmapped Element.  This element contains base64 encoded textual data, but with no character mapping
				applied.  Runs representing interesting character attributes can appear in the unmapped element.  Text
				appearing inside runs that are, in turn, inside unmapped elements will be base64 encoded.  The unmapped
				element has two required attributes used to help interpret the data: the original character set, and the font
				name applied to the the text.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="r" type="s:r"/>
		</xsd:choice>
		<xsd:attribute name="oce" type="xsd:hexBinary" use="required"/>
		<xsd:attribute name="font" type="xsd:string" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="bookmark">
		<xsd:annotation>
			<xsd:documentation>
				Bookmark Element.  This element is used as a target and a grouping mechanism for internal linking
				similarly to a bookmark in a word processing document of an internal link in a spreadsheet.  It must
				contain an attribute representing and ID and it can contain target elements describing the area linked to.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="target" type="s:target"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:ID" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="target">
		<xsd:annotation>
			<xsd:documentation>
				Target Element.  This element is used to describe the destination of an internal hyperlink, primarily in
				spreadsheets.  The target element will have a sheet attribute describing the sheet of the link destination.
				Optionally a start_cell element may be present to indicate the start of targeted group of cells.  If the target
				range has more than a single cell, an end_cell attribute will indicate the end of the target area.  More than
				one target may be present in a single bookmark as a link can be made to a set of discontinuous cells.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="sheet" type="xsd:string" use="required"/>
		<xsd:attribute name="start_cell" type="xsd:string" use="optional"/>
		<xsd:attribute name="end_cell" type="xsd:string" use="optional"/>
	</xsd:complexType>
</xsd:schema>
