  <ml:tutorial root="parent"/>
  <h1>Setup</h1>

  <h3 id="install-marklogic"><a href="#install-marklogic">Install MarkLogic</a></h3>

  <p>Download and install the latest version of MarkLogic from this page: <a href="/products">http://developer.marklogic.com/products</a>. Once you've installed and started up MarkLogic, go to the browser-based administrative interface (at <a href="http://localhost:8001/" target="_blank">http://localhost:8001/</a>), where you'll be walked through the process of getting a Developer License, as well as setting up an admin user. (This tutorial assumes you'll be running MarkLogic on your local machine; if that's not the case, just substitute your server name whenever you see "localhost" in this tutorial.)</p>

  <p>If you need more detailed instructions on installing and running MarkLogic, see <a href="//docs.marklogic.com/guide/installation/procedures#id_28962">Installing MarkLogic Server</a>.</p>

  <h3 id="set-up-the-tutorial-project"><a href="#set-up-the-tutorial-project">Set up the tutorial project</a></h3>

  <p>Next, download the tutorial project: <a href="/media/learn/java/java-api-tutorial.zip"><em>java-api-tutorial.zip</em></a>. Unzip the file into a directory of your choice on your machine.</p>

  <p>Although you're free to use whatever IDE you prefer, the tutorial files have been packaged as a Maven project and can be opened in Eclipse using the <a href="http://www.sonatype.org/m2eclipse/" target="_blank">m2eclipse</a> plugin. If you'd like to not have to worry about CLASSPATHs and dependencies to work through this tutorial, then I encourage you to follow the additional steps below. (If you'd rather wire everything up for yourself, you can download the <a href="/products/java">Java API distribution</a> directly and skip the rest of this section.)</p>

  <ol compact="none">
    <li>Download and install the latest stable release of <a href="http://www.eclipse.org/downloads/" target="_blank">Eclipse</a> (I used the "Indigo" and "Juno" versions while writing this tutorial.)</li>
    <li>Start up Eclipse and select the "Help"-&gt;"Install New Software…" menu.</li>
    <li>In the "Work with:" field, paste the following URL: <a href="http://download.eclipse.org/technology/m2e/releases" target="_blank"><code>http://download.eclipse.org/technology/m2e/releases</code></a><code><br clear="none"/></code> <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot1.jpg"><img alt="Machine generated alternative text: 0 0 0 Install _____________________ Available Software Select a site or enter the location of a site. Work wit ttp//download.eclipse.orgftechnology/m2e/re s Find more software by working with the Available Software Sites preferences. flter text Name Version cO There is no site selected." src="/media/marklogic-for-java-developers_files/screenshot1.jpg" width="576" height="164"/></a></p></li>
    <li>Click the "Add…" button.</li>
    <li>In the next dialog, give the new repository a name, e.g., "m2e", and hit OK:<br clear="none"/> <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot2.jpg"><img alt="Machine generated alternative text: 0 C) O Add Repository Name: ______________________ J ( Local... ] Location: http://download,eclipse.org/technology/m2e/releases ‘ (__Archive.., J Cancel OK" src="/media/marklogic-for-java-developers_files/screenshot2.jpg" width="411" height="152"/></a></p></li>
    <li>Once it appears, check the checkbox next to "Maven Integration for Eclipse":<br clear="none"/> <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot3.jpg"><img alt="Machine generated alternative text: ‘Name g O[ Maven Integration for Eclipse" src="/media/marklogic-for-java-developers_files/screenshot3.jpg" width="422" height="90"/></a></p></li>
    <li>Click the "Next" button and "Next" again to confirm installation.</li>
    <li>Review and accept the license in order to begin the installation. Once the installation is complete, you'll be prompted to restart Eclipse.</li>
    <li>After Eclipse has restarted, select File-&gt;Import…</li>
    <li> In the Import dialog, select "Existing Maven Projects" under the "Maven" folder, and click the Next button.<br clear="none"/> <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot4.jpg"><img alt="Machine generated alternative text: 0 0 0 Import Select Import Existing Maven Projects [ì’Iá 9 Select an import source: t. t 1 tut tt LEI’ Install Java EE V Maven Check out Maven Projects from SCM Lng I!ivii Projects ______ ________________________ flInstaII or deploy an artifact to a Maven repository Materialize Maven Projects from SCM Plug—in Development Remote Systems &lt;Back Next J ( Cancel ] Finish" src="/media/marklogic-for-java-developers_files/screenshot4.jpg" width="418" height="384"/></a></p></li>
    <li>On the next screen, click "Browse…" and browse to the location where you unzipped the tutorial project, selecting "java-api-tutorial" as the root directory.</li>
    <li>Ensure that the checkbox for the project is checked and click the "Finish" button.</li>
  </ol>

  <p>The rest of this section will walk you through these steps.</p>

  <h3 id="create-a-database"><a href="#create-a-database">Create a database</a></h3>

  <p>We'll use the MarkLogic REST API to create the database. Save this JSON content in a file called <code>tutorial.json:</code></p>

  <textarea class="codemirror javascript">
{
  "rest-api": {
    "name": "TutorialServer",
    "database": "TutorialDB",
    "modules-database": "Tutorial-modules",
    "port": "8011"
  }
}</textarea>

  <p>Now tell MarkLogic to apply this configuration, which will create an application server, content database, and modules database. (Adjust the username and password as needed.)</p>

  <textarea class="codemirror shell">
curl --anyauth --user user:password -X POST -d@'./tutorial.json' -i \
  -H "Content-type: application/json" \
  http://localhost:8002/v1/rest-apis</textarea>

  <p>By creating a REST API instance in this way, MarkLogic has created and configured the underlying components for you (specifically, an HTTP app server and an associated modules database). To prove that the REST API instance is running, navigate in your browser to <a href="http://localhost:8011/" target="_blank">http://localhost:8011/</a>. You should see a page that looks something like this:</p>

  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/v7/screenshot14.png"><img alt="Shows default REST API page, which provides example URLs for search; query configuration; transformation configuration; and adding, removing, and viewing documents." src="/media/marklogic-for-java-developers_files/v7/screenshot14.png"/></a></p>

  <h3 id="create-rest-users"><a href="#create-rest-users">Create REST users</a></h3>

  <p>MarkLogic has a powerful and flexible security system. Before you can run the Java examples, you'll first need to create a user with the appropriate execute privileges. You of course could use the "admin" user (which has no security restrictions), but as a best practice, we're going to create two users:</p>

  <ul>
    <li>one with the "rest-writer" role, and</li>
    <li>one with the "rest-admin" role.</li>
  </ul>

  <p>(There is also a "rest-reader" role available, which provides read-only access to the REST API, but we won't be using that.)</p>

  <p>Before we create the users, let's go back into Eclipse and open the <em>Config.properties</em> file:</p>

  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot15.jpg"><img alt="Machine generated alternative text: Package Exporer  V java-api-tutoriaI Q src/main/java V Ç, src/mainfresources Ç3data I E] Config.properties I" src="/media/marklogic-for-java-developers_files/screenshot15.jpg" width="280" height="140"/></a></p>

  <p>Take a look at its contents:</p>

  <textarea class="codemirror shell">
# properties to configure the examples
example.writer_user=rest-writer
example.writer_password=x
example.admin_user=rest-admin
example.admin_password=x
example.host=localhost
example.port=8011
example.authentication_type=digest</textarea>


  <p>This is the default configuration file that comes with the tutorial project. You can modify it as necessary (for example, if MarkLogic is running on a different machine), but the rest of this tutorial will assume the REST API instance is located at <a href="http://localhost:8011/" target="_blank">http://localhost:8011/</a>. Now we just need to create the "rest-writer" and "rest-admin" users referenced in the above properties file.</p>

  <p>MarkLogic's Management API lets you manage roles and users. You can see your current list of users by pointing a browser to <a href="http://localhost:8002/manage/v2/users?format=html">http://localhost:8002/manage/v2/users?format=html</a>.</p>

  <figure>
    <img src="/media/learn/java/users.png"/>
    <figcaption>Current users configured in MarkLogic</figcaption>
  </figure>

  <p>My instance of MarkLogic has four users defined: infostudio-admin, nobody, healthcheck, and admin. These users are all created when MarkLogic does its initial configuration.</p>

  <p>To create the users we need, we'll use the <code>/manage/v2/users</code> endpoint. (Naturally, you would typically use a better password; this is just for tutorial purposes.) Save this information as rest-writer.json:</p>

  <textarea class="codemirror javascript">
{
  "user-name": "rest-writer",
  "password": "x",
  "description": "REST writer for the Java tutorial",
  "role": [ "rest-writer" ]
}</textarea>

  <p>Send this configuration to MarkLogic with a <code>curl</code> command:</p>

  <textarea class="codemirror shell">
curl -X POST  --anyauth -u user:password --header "Content-Type:application/json" \
  -d @./rest-writer.json \
  http://localhost:8002/manage/v2/users</textarea>

  <p>Repeat the same process for the "rest-admin" user (also with password "x"). Only this time, specify the "rest-admin" role instead:</p>

  <p>
  <textarea class="codemirror javascript">
{
  "user-name": "rest-admin",
  "password": "x",
  "description": "REST admin for the Java tutorial",
  "role": [ "rest-admin" ]
}</textarea></p>

  <p>
  <textarea class="codemirror shell">
curl -X POST  --anyauth -u user:password --header "Content-Type:application/json" \
  -d @./rest-admin.json \
  http://localhost:8002/manage/v2/users</textarea></p>

  <p>If you refresh the <a href="http://localhost:8002/manage/v2/users?format=html">http://localhost:8002/manage/v2/users?format=html</a> browser page, you should now see both users.</p>

  <p>Now we've got everything set up on the server side, so let's start interacting with MarkLogic via Java.</p>
