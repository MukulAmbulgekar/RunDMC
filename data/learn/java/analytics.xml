<?xml version="1.0" encoding="UTF-8"?>
<ml:page status="Published" xmlns:ml="http://developer.marklogic.com/site/internal" xmlns="http://www.w3.org/1999/xhtml">  <ml:tutorial root="parent"/>
  <h1>Analytics</h1>
  <p>
"Analytics" is used to describe a class of functionality in
MarkLogic that relates to retrieving values and frequencies of
values across a large number of documents. With search/query, we're
interested in finding documents themselves. With analytics, we're
interested in extracting all the unique values that appear within a
particular context (such as an XML element or JSON key), as well as
the number of times each value occurs. An example of analytics in a
MarkLogic application is the message traffic chart on <a href="http://markmail.org/" target="_blank">MarkMail.org</a>:</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot25.jpg"><img alt="Machine generated alternative text: 0 0 0 Home - MarkMaiI - Commt (- C [markmail.org s  I ]UIM[ark Ìt o- Want your own MarkMair? Tell us about it. Sign In or Sign Up (Why?) Summary of all Messages What’s New Search for: T (_Search_J ç Actions &gt; Previous news itE &gt; Subscribe to the &gt; Read the FAQ &gt; Give feedback &gt; Advertise here &gt; 1 FINDMEOII-’1 I ¡‘‘‘ ‘- I I._ ) About MarkMall harmony mozilia spamassassin Who invoked Godwin’s Law? MarkMaiI is devel apache hibernate myfaces squid-cache MarkLogic Corpor cocoon httpd mysal struts “godwin’s law” opt:noquote MarkMail is a free s incubator pj thunderbird mailing list archives discuss advantages over tr jdom p.jj tomcat engines. It is power fìrfrw jri.h, nhñ Searches for these SDeclfies that tte Server: Each email" src="/media/marklogic-for-java-developers_files/screenshot25.jpg" width="469" height="384"/></a></p>
  <p>The
above chart portrays ranges of email message dates bucketed by
month, as well as the number of messages that appear each month.
Since MarkMail hosts over 50 million messages, it of course does
not go read all those messages when you load the page. Instead,
whenever a new document (email message) is loaded into the
database, its date is added to a sorted, in-memory list of message
dates (values), each associated with a count (frequency). This is
achieved through an administrator-defined index (called a
<em>range index</em>).</p>
  <p>A
range index is one kind of <em>lexicon</em>. Whenever you want to perform
analytics, you need to have a lexicon configured. In addition to
range indexes, other lexicons include the <em>URI lexicon</em> and the <em>collection lexicon</em>. Each of these must
be explicitly configured in the database.</p>
  <h3 id="retrieve-all-collection-tags"><a href="#retrieve-all-collection-tags">
Retrieve all collection
tags</a></h3>
  <p>For
this example, you need to have the collection lexicon enabled.
Fortunately, we already took care of that at the beginning when we
set up the database. Open <em>Example_33_ValuesOfCollectionTags.java</em>.
As when defining constraints, we need a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/admin/config/QueryOptionsBuilder.html">
QueryOptionsBuilder</a> for making values available, this time with
the <strong>withValues()</strong> method:</p>
  <script src="https://gist.github.com/3290041.js?file=ex86.java" xml:space="preserve"> </script>
  <noscript id="ex86.java">
    <pre class="java" xml:space="preserve">// create a builder for constructing query options
QueryOptionsBuilder qob = new QueryOptionsBuilder();
 
// expose the collection lexicon as "tag" values
QueryOptionsHandle options = new QueryOptionsHandle().withValues(
    qob.values("tag",
        qob.collection("")));</pre>
  </noscript>
  <p>The
first argument to <strong>values()</strong>
is the name we'll be using when we fetch the values ("tag"); the
second defines the source of those values. The <strong>collection()</strong> constructor indicates the
collection lexicon as the source. Next we upload the options to the
server for our subsequent use, just as we did in the constraint
examples:</p>
  <script src="https://gist.github.com/3290041.js?file=ex87.java" xml:space="preserve"> </script>
  <noscript id="ex87.java">
    <pre class="java" xml:space="preserve">// write the query options to the database
optionsMgr.writeOptions(optionsName, options);</pre>
  </noscript>
  <p>
Whereas with a search we need to construct a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/QueryDefinition.html">
QueryDefinition</a>, with a values retrieval we need to construct a
a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/ValuesDefinition.html">
ValuesDefinition</a>, passing it both the name we defined ("tag")
and the name of the options we just configured on the server:</p>
  <script src="https://gist.github.com/3290041.js?file=ex88.java" xml:space="preserve"> </script>
  <noscript id="ex88.java">
    <pre class="java" xml:space="preserve">// create a values definition
ValuesDefinition valuesDef = queryMgr.newValuesDefinition("tag", optionsName);</pre>
  </noscript>
  <p>
Similarly, whereas with search we use a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/io/SearchHandle.html">
SearchHandle</a> to receive results, with values we use a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/io/ValuesHandle.html">
ValuesHandle</a> to receive the results:</p>
  <script src="https://gist.github.com/3290041.js?file=ex89.java" xml:space="preserve"> </script>
  <noscript id="ex89.java">
    <pre class="java" xml:space="preserve">// retrieve the values
ValuesHandle valuesHandle = queryMgr.values(valuesDef, new ValuesHandle());</pre>
  </noscript>
  <p>The
above line defines the handle and fetches the results in one step.
This time, instead of calling <strong>search()</strong>, we call our query manager's
<strong>values()</strong> method. Now we'll
print out the results using the handle's <strong>getValues()</strong> accessor:</p>
  <script src="https://gist.github.com/3290041.js?file=ex90.java" xml:space="preserve"> </script>
  <noscript id="ex90.java">
    <pre class="java" xml:space="preserve">// print out the values and their frequencies
for (CountedDistinctValue value : valuesHandle.getValues()) {
    System.out.println(
        value.get("xs:string",String.class) + ": " + value.getCount());
}</pre>
  </noscript>
  <p>Run
the program. The output shows all the collection tags and their
frequency of usage (in other words, how many documents are in each
collection). You can also view the values directly in your browser
at: <a href="http://localhost:8011/v1/values/tag?options=Example_33_ValuesOfCollectionTags" target="_blank">
http://localhost:8011/v1/values/tag?options=Example_33_ValuesOfCollectionTags</a>.</p>
  <h3 id="retrieve-all-document-uris"><a href="#retrieve-all-document-uris">
Retrieve all document
URIs</a></h3>
  <p>This
example requires the URI lexicon to be enabled. Starting in
MarkLogic 6, it's enabled by default, so here too we're ready to
go. Open <em>Example_34_ValuesOfURI.java</em>. This
example is almost identical to the previous one except that we're
choosing a different values name ("uri") and a different values
source (the URI lexicon):</p>
  <script src="https://gist.github.com/3290041.js?file=ex91.java" xml:space="preserve"> </script>
  <noscript id="ex91.java">
    <pre class="java" xml:space="preserve">// expose the URI lexicon as "uri" values
QueryOptionsHandle options = new QueryOptionsHandle().withValues(
    qob.values("uri",
        qob.uri()));</pre>
  </noscript>
  <p>The
<strong>uri()</strong> constructor indicates
the URI lexicon as the source. Run the program to see all the
document URIs in the database, as well as how many documents
they're each associated with (the frequency). For all the JSON and
XML document URIs, the answer of course is just one per document.
But you might be surprised to see that each image document URI
yields a count of 2. That's because each image document has an
associated properties document which shares the same URI.</p>
  <h3 id="set-up-some-range-indexes"><a href="#set-up-some-range-indexes">
Set up some range
indexes</a></h3>
  <p>
Before we can run the remaining examples in this section, we need
to enable some range indexes in our database. Since we have a small
number of documents, it won't take long for MarkLogic to re-index
everything. At a much larger scale, you'd want to be careful about
what indexes you enable and when you enable them. That's why such
changes require database administrator access.</p>
  <p>We're
going to set up the following range indexes:</p>
  <table><thead>
      <tr>
	<th rowspan="1" colspan="1">
<p>
scalar type</p>
</th>
	<th rowspan="1" colspan="1">
<p>
namespace uri</p>
</th>
	<th rowspan="1" colspan="1">
<p>
localname</p>
</th>
      </tr>
    </thead><tbody>
      <tr>
	<td rowspan="1" colspan="1">
<p>
string</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<em>empty</em></p>
</td>
	<td rowspan="1" colspan="1">
<p>
SPEAKER</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
string</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/xdmp/json/basic" target="_blank">http://marklogic.com/xdmp/json/basic</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
affiliation</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
int</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/xdmp/json/basic" target="_blank">http://marklogic.com/xdmp/json/basic</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
contentRating</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
unsignedLong</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/filter" target="_blank">http://marklogic.com/filter</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
size</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
string</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/filter" target="_blank">http://marklogic.com/filter</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
Exposure_Time</p>
</td>
      </tr>
    </tbody></table>
  <p>
Navigate to your database's configuration page for element range
indexes (at <a href="http://localhost:8001/" target="_blank">http://localhost:8001/</a>):</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot26.jpg"><img alt="Machine generated alternative text: [] Configure ! Groups iL Databases IFIS App-Services E}I Documents Extensions EF Fab E}i Last-Login Modules LEF Security EI Tnggers $Ctona1DB ¡ Ei[ Forests I I E Flexible Replication ! ! Database Replication I Ei Fragment Roots ¡ EI Fragment Parents I EF Triggers ! ! Merge Policy I E Scheduled Backups ¡ EI Content Processin I I a Element Range Indexes ! ! Ifl Attribute Range Indexes ! Field Range Indexes" src="/media/marklogic-for-java-developers_files/screenshot26.jpg" width="199" height="384"/></a></p>
  <p>At
the top of the page, click the "Add" tab:</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot27.jpg"><img alt="Machine generated alternative text: Element Range Index Configuration Configure [ Add ( Help _______ ______________________ -::= ---Z&gt;" src="/media/marklogic-for-java-developers_files/screenshot27.jpg" width="576" height="56"/></a></p>
  <p>Here
you will enter the appropriate values for one range index. We'll be
concerned with just three form fields (leaving the rest at their
defaults):</p>
  <ul>
    <li>
scalar
type</li>
    <li>
namespace
uri</li>
    <li>
localname</li>
  </ul>
  <p>For
example, to configure the first range index, you'd choose "string"
for scalar type, leave the namespace uri field blank, type
"SPEAKER" for localname, and hit "OK":</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot28.jpg"><img alt="Machine generated alternative text: Add Range Indexes to Database scalar type ng An atonr type spffton. namespace un A names pace URI. lo cal name CR One or more localnamnes. collation http://marklogic.conVcollationi Root Collation collation builder A collatbn LJRI for string comparisons. rango value posItions :Thtrue Øfalse Index range value positions for faster near searches involving range queries (slower document loads and larger database files). InvalId values reject 1 Allow ingestion of documents that do not have matching type of data. more items cancel -" src="/media/marklogic-for-java-developers_files/screenshot28.jpg" width="449" height="384"/></a></p>
  <p>This
will cause the database to build a range index on all
&lt;SPEAKER&gt; elements. Using the same process described above,
add each of the remaining range indexes to your database:</p>
  <table><thead>
      <tr>
	<th rowspan="1" colspan="1">
<p>
scalar type</p>
</th>
	<th rowspan="1" colspan="1">
<p>
namespace uri</p>
</th>
	<th rowspan="1" colspan="1">
<p>
localname</p>
</th>
      </tr>
    </thead><tbody>
      <tr>
	<td rowspan="1" colspan="1">
<p>
string</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/xdmp/json/basic" target="_blank">http://marklogic.com/xdmp/json/basic</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
affiliation</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
int</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/xdmp/json/basic" target="_blank">http://marklogic.com/xdmp/json/basic</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
contentRating</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
unsignedLong</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/filter" target="_blank">http://marklogic.com/filter</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
size</p>
</td>
      </tr>
      <tr>
	<td rowspan="1" colspan="1">
<p>
string</p>
</td>
	<td rowspan="1" colspan="1">
<p>
<a href="http://marklogic.com/filter" target="_blank">http://marklogic.com/filter</a></p>
</td>
	<td rowspan="1" colspan="1">
<p>
Exposure_Time</p>
</td>
      </tr>
    </tbody></table>
  <p>Now
that we have the indexes configured, let's dive back into
Eclipse.</p>
  <h3 id="retrieve-values-of-a-json-key"><a href="#retrieve-values-of-a-json-key">
Retrieve values of a JSON
key</a></h3>
  <p>Open
up <em>Example_35_ValuesOfJSONKey.java.</em> First
we initialize our query options with a values spec:</p>
  <script src="https://gist.github.com/3290041.js?file=ex92.java" xml:space="preserve"> </script>
  <noscript id="ex92.java">
    <pre class="java" xml:space="preserve">// expose the "affiliation" JSON key range index as "company" values
QueryOptionsHandle options = new QueryOptionsHandle().withValues(
    qob.values("company",
        qob.range(
            qob.jsonRangeIndex("affiliation",
                qob.stringRangeType(QueryOptions.DEFAULT_COLLATION))),
        "frequency-order"));
 
// write the query options to the database
optionsMgr.writeOptions(optionsName, options);</pre>
  </noscript>
  <p>As
with collection and URI values, we start by choosing a name
("company"). This time, instead of uri() or collection(), we use
<strong>range()</strong> to indicate that a
range index is the source of the values. Here we must make sure
that the arguments we pass exactly line up with the range index
that's configured in the database. Otherwise, you'll get an "index
not found" error when you try to retrieve the values.</p>
  <p>You
may recall that we used a <strong>jsonTermIndex()</strong> to indicate the source
of a key constraint. A "term index" is always enabled as part of
MarkLogic's Universal Index and lets you lookup documents based on
some criterion. In this case, we want to retrieve all the values of
a given JSON key (rather than find a document, given its key). For
that, we need to use the range index and thus we call <strong>jsonRangeIndex()</strong>, passing it the name of
the key and the type of the indexed values (string, using the
default collation).</p>
  <p>The
last thing to point out above is that, rather than return the
values in alphabetical (collation) order, we want to get them in
"frequency order." In other words, return the most commonly
mentioned companies first. That's what the "frequency-order" option
(passed to <strong>values()</strong>) lets
you do.</p>
  <p>Just
as with the two previous examples, we create a values definition
(using the name "company") and pass it to our query manager's
<strong>values()</strong> method to retrieve
the results:</p>
  <script src="https://gist.github.com/3290041.js?file=ex93.java" xml:space="preserve"> </script>
  <noscript id="ex93.java">
    <pre class="java" xml:space="preserve">// create a values definition
ValuesDefinition valuesDef = queryMgr.newValuesDefinition("company", optionsName);
 
// retrieve the values
ValuesHandle valuesHandle = queryMgr.values(valuesDef, new ValuesHandle());</pre>
  </noscript>
  <p>Run
the program to see the results. Unsurprisingly, you'll see that
MarkLogic was the most common company affiliation at the MarkLogic
World conference.</p>
  <h3 id="retrieve-values-of-an-element"><a href="#retrieve-values-of-an-element">
Retrieve values of an
element</a></h3>
  <p>Open
up <em>Example_36_ValuesOfElement.java</em>. Here,
rather than using a jsonRangeIndex(), we're using an <strong>elementRangeIndex()</strong> to indicate the
source of our "speaker" values:</p>
  <script src="https://gist.github.com/3290041.js?file=ex94.java" xml:space="preserve"> </script>
  <noscript id="ex94.java">
    <pre class="java" xml:space="preserve">// expose the "SPEAKER" element range index as "speaker" values
QueryOptionsHandle options = new QueryOptionsHandle().withValues(
    qob.values("speaker",
            qob.range(
                qob.elementRangeIndex(new QName("SPEAKER"),
                    qob.stringRangeType(QueryOptions.DEFAULT_COLLATION))),
            "frequency-order"));</pre>
  </noscript>
  <p>Run
the program to see all the unique speakers in the Shakespeare
plays, starting with the most garrulous.</p>
  <h3 id="compute-aggregates-on-values"><a href="#compute-aggregates-on-values">
Compute aggregates on
values</a></h3>
  <p>Not
only can we retrieve values and their frequencies; we can also
perform aggregate math on the server. MarkLogic provides a series
of built-in aggregate functions such as avg, max, count, and
covariance, as well as the ability to construct user-defined
functions (UDFs) in C++ for close-to-the-database computations.</p>
  <p>Open
up <em>Example_37_ValuesOfJSONKeyNumeric.java</em>.
In this example, we're going to access an integer index on the
"contentRating" JSON key:</p>
  <script src="https://gist.github.com/3290041.js?file=ex95.java" xml:space="preserve"> </script>
  <noscript id="ex95.java">
    <pre class="java" xml:space="preserve">// expose the "contentRating" JSON key range index as "rating" values
QueryOptionsHandle options = new QueryOptionsHandle().withValues(
    qob.values("rating",
        qob.range(
            qob.jsonRangeIndex("contentRating",
                qob.rangeType("xs:int")))));</pre>
  </noscript>
  <p>This
time, in addition to setting up the values definition, we'll
configure it to compute both the mean and median averages:</p>
  <script src="https://gist.github.com/3290041.js?file=ex96.java" xml:space="preserve"> </script>
  <noscript id="ex96.java">
    <pre class="java" xml:space="preserve">// create a values definition
ValuesDefinition valuesDef = queryMgr.newValuesDefinition("rating", optionsName);
 
// also retrieve the averages of all ratings
valuesDef.setAggregate("avg","median");</pre>
  </noscript>
  <p>
Before fetching the values, we'll opt to get them in descending
order (highest ratings first):</p>
  <script src="https://gist.github.com/3290041.js?file=ex97.java" xml:space="preserve"> </script>
  <noscript id="ex97.java">
    <pre class="java" xml:space="preserve">// retrieve values in descending order
valuesDef.setDirection(Direction.DESCENDING);</pre>
  </noscript>
  <p>Run
the program to see how many conference talks scored 5 stars, how
many scored 4 stars, etc.—as well as the mean and median rating
for all conference talks.</p>
  <h3 id="constrain-the-values-returned-using-a-query"><a href="#constrain-the-values-returned-using-a-query">
Constrain the values returned using
a query</a></h3>
  <p>This
example starts to hint at the real power of MarkLogic: combining
analytics with search. Rather than retrieve <em>all</em> the values of a given key, we're
going to retrieve only the values from documents meeting a certain
criterion. In this case, we'll get all the ratings for conference
talks given by employees of a certain organization. To configure
this, we supply both a values option <em>and</em> a constraint option:</p>
  <script src="https://gist.github.com/3290041.js?file=ex98.java" xml:space="preserve"> </script>
  <noscript id="ex98.java">
    <pre class="java" xml:space="preserve">QueryOptionsHandle options = new QueryOptionsHandle()
// expose the "contentRating" JSON key range index as "rating" values
.withValues(
    qob.values("rating",
        qob.range(
            qob.jsonRangeIndex("contentRating",
                qob.rangeType("xs:int")))))
    // optionally constrain results by affiliation
    .withConstraints(
        qob.constraint("company",
            qob.value(
                qob.jsonTermIndex("affiliation")
            )));</pre>
  </noscript>
  <p>In a
nutshell, the above configures two things: a "rating" lexicon and a
"company" constraint. To retrieve values, we define the values
definition as usual, but this time we also associate it with a
query, using the <strong>setQueryDefinition()</strong> method:</p>
  <script src="https://gist.github.com/3290041.js?file=ex99.java" xml:space="preserve"> </script>
  <noscript id="ex99.java">
    <pre class="java" xml:space="preserve">// create a values definition
ValuesDefinition valuesDef = queryMgr.newValuesDefinition("rating", optionsName);
 
// create a search definition
StringQueryDefinition companyQuery = queryMgr.newStringDefinition("tutorial");
companyQuery.setCriteria("company:marklogic");
 
// return only those values from fragments (documents) matching this query
valuesDef.setQueryDefinition(companyQuery);</pre>
  </noscript>
  <p>Run
the program to see the ratings of all talks given by MarkLogic
employees (documents matching the "company:marklogic" string
query). You can also see these results in the browser using this
URL: <a href="http://localhost:8011/v1/values/rating?options=Example_38_ValuesWithQuery&amp;q=company:marklogic&amp;format=json" target="_blank">
http://localhost:8011/v1/values/rating?options=Example_38_ValuesWithQuery&amp;q=company:marklogic&amp;format=json</a></p>
  <h3 id="retrieving-tuples-of-values-(co-occurrences)"><a href="#retrieving-tuples-of-values-(co-occurrences)">
Retrieving tuples of values
(co-occurrences)</a></h3>
  <p>In
addition to retrieving values from a single source, you can also
retrieve co-occurrences of values from n sources. In other words,
you can perform analytics on multi-dimensional data sets. Open up
<em>Example_39_Tuples.java</em>. In
this case, we're getting all the unique pairings of photo size and
exposure time, via the <strong>withTuples()</strong> method:</p>
  <script src="https://gist.github.com/3290041.js?file=ex100.java" xml:space="preserve"> </script>
  <noscript id="ex100.java">
    <pre class="java" xml:space="preserve">// expose unique combinations (co-occurrences) of size and exposure
QueryOptionsHandle options = new QueryOptionsHandle().withTuples(
    qob.tuples("size-exposure",
        qob.tupleSources(
            qob.range(
                qob.elementRangeIndex(new QName("http://marklogic.com/filter","size"),
                    qob.rangeType("xs:unsignedLong"))),
            qob.range(
                qob.elementRangeIndex(new QName("http://marklogic.com/filter","Exposure_Time"),
                qob.stringRangeType(QueryOptions.DEFAULT_COLLATION))))));</pre>
  </noscript>
  <p>The
<strong>tupleSources()</strong> constructor
takes two value sources. In this case, we're accessing two range
indexes. Like a call to values, we start with a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/ValuesDefinition.html">
ValuesDefinition</a>, giving it the name we configured
("size-exposure"), but then we call <strong>tuples()</strong> to fetch the tuples:</p>
  <script src="https://gist.github.com/3290041.js?file=ex101.java" xml:space="preserve"> </script>
  <noscript id="ex101.java">
    <pre class="java" xml:space="preserve">// create a values definition
ValuesDefinition valuesDef = queryMgr.newValuesDefinition("size-exposure", optionsName);
 
// retrieve the tuples
TuplesHandle tuplesHandle = queryMgr.tuples(valuesDef, new TuplesHandle());</pre>
  </noscript>
  <p>Also,
instead of a ValuesHandle, we use a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/io/TuplesHandle.html">
TuplesHandle</a>, which encapsulates the data in a POJO through
which we can access each tuple using <strong>getTuples()</strong>:</p>
  <script src="https://gist.github.com/3290041.js?file=ex102.java" xml:space="preserve"> </script>
  <noscript id="ex102.java">
    <pre class="java" xml:space="preserve">// print out each size/exposure co-occurrence
for (Tuple tuple : tuplesHandle.getTuples()) {
    System.out.println("Size: "     + tuple.getValues()[0].get(Long.class)
                   + "\nExposure: " + tuple.getValues()[1].get(String.class));
    System.out.println();
}</pre>
  </noscript>
  <h3 id="searching-with-facets"><a href="#searching-with-facets">
Searching with facets</a></h3>
  <p>As
mentioned earlier, MarkLogic's real power lies in the combination
of search and analytics. A couple examples ago we saw how a query
could be used to constrain a values retrieval. What we haven't seen
yet is how the query manager's <strong>search()</strong> method can also return lists of
values (called "facet values") along with its search results. These
facets can then be used to interactively explore your data. In this
case, we're not calling <strong>values()</strong> at all, just search.</p>
  <p>But
before we can run a faceted search, we need to define one or more
constraints that are backed by a lexicon or range index. See in
<em>Example_40_SearchWithFacets.java</em>:</p>
  <script src="https://gist.github.com/3290041.js?file=ex103.java" xml:space="preserve"> </script>
  <noscript id="ex103.java">
    <pre class="java" xml:space="preserve">QueryOptionsHandle options = new QueryOptionsHandle().withConstraints(
    // expose the "contentRating" JSON key range index as "rating" values
    qob.constraint("rating",
        qob.range(
            qob.jsonRangeIndex("contentRating",
                qob.rangeType("xs:int")),
            Facets.FACETED,
            FragmentScope.DOCUMENTS,
            qob.buckets(),
            "descending")), // highest ratings first
 
    // expose the "affiliation" JSON key range index as "company" values
    qob.constraint("company",
        qob.range(
            qob.jsonRangeIndex("affiliation",
                qob.stringRangeType(QueryOptions.DEFAULT_COLLATION)),
            Facets.FACETED,
            FragmentScope.DOCUMENTS,
            qob.buckets(),
            "frequency-order"))); // most common values first</pre>
  </noscript>
  <p>The
above configuration makes the "rating" and "company" constraints
available for users to type in their query search string. You may
be thinking "Isn't that only going to be useful for power users?
Most users aren't going to bother learning a search grammar."
That's true, but with a UI that supports <em>faceted navigation</em>, they won't need to.
All they'll have to do is click a link to get the results
constrained by a particular value. For example, the screenshot
below from MarkMail shows four facets: month, list, sender, and
attachment type:</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot29.jpg"><img alt="Machine generated alternative text: MarkM1it j) Home Messages per 12000C 100000 80000 60000 20000 ‘00 .01 ‘02 ‘03 ‘04 ‘05 ‘06 ‘07 jWhat List? . netjava.dev.opensso.issues netjava,dev.glassfish.users net.java.dev.maven-repository.cvs org .jboss.I ists.jboss-cvs-commits org.netbeans.nbusers netjava.dev.glassfish.issues org .j boss.I ists.jboss-user org.apache.tuscany.dev netjava.dev.mojarra.commits netjavadev.mifosissues netjava.dev.sailrinissues net.java.dev.hudson.users orgapache.hadoop.core-dev com.googlegroups.google-web-toolkit Month Remove date refinements’ tir.  ‘08 ‘09 ‘10 ‘11 12 View morel 9,034 8,095 7,282 6,767 6,079 5,503 5,188 5,097 5,004 4,721 4,686 4,665 4,467 4,278 ‘Who Sent It? View more LS’] Attachments? View moro kohs,..©dev.java.net 7,321 patch 980 mave..©dev.java.net 7,280 zip 858 rlu.,cdev.java.net 6,741 txt 713 jbos...©lists.jboss.org 6,270 jpg 686 glas..javadesktop.org 5,725 java 578 Continuum VMBuild Server 4,334 gif 466 Build Daemon user 3,428 png 445 sv...©wso2.org 3,343 log 437 met...©javadesktop.org 3,139 html 393 cont..©apache.org 2,888 duff 353 to...©freenetprojectorg 2,718 xml 335 jbos...lists.jboss.org 2,541 pdf 236 dcleal 2,529 dat 208 code...tgoogle.com 2,454 Other 201" src="/media/marklogic-for-java-developers_files/screenshot29.jpg" width="366" height="728"/></a></p>
  <p>Each
of these is a facet, whose values are retrieved from a range index.
Moreover, users can drill down and pick various combinations of
facets simply by clicking a link, or in the case of the histogram,
swiping their mouse pointer.</p>
  <p>
MarkLogic's Java API gives you everything you need to construct a
model for faceted navigation. Our sample program doesn't include a
UI, but it will run a series of searches that a user might have
chosen:</p>
  <script src="https://gist.github.com/3290041.js?file=ex104.java" xml:space="preserve"> </script>
  <noscript id="ex104.java">
    <pre class="java" xml:space="preserve">String[] searches = {"", // empty search; return all results
                     "company:MarkLogic",
                     "company:MarkLogic rating:5",
                     "java rating GE 4"};</pre>
  </noscript>
  <p>For
each of the above search strings, we run the search and print out
all the facets and their values:</p>
  <script src="https://gist.github.com/3290041.js?file=ex105.java" xml:space="preserve"> </script>
  <noscript id="ex105.java">
    <pre class="java" xml:space="preserve">// run the search
queryMgr.search(query, resultsHandle);
 
// Show the resulting facets &amp; their values
for (FacetResult facet : resultsHandle.getFacetResults()) {
    System.out.println(facet.getName() + ":");
    for (FacetValue value : facet.getFacetValues()) {
        System.out.println("  " + value.getCount() + " occurrences of " + value.getName());
    }
}</pre>
  </noscript>
  <p>Run
the program to see the results.</p>
  <p>Just
as the API provides a model for a list of search results (an array
of <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/MatchDocumentSummary.html">
MatchedDocumentSummary</a> instances), it also provides a model for
facet results (an array of <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/FacetResult.html">
FacetResult</a> instances). The above code gets the facets using
the search handle's <strong>getFacetResults()</strong> method, iterates
through each facet, and for each of its values, prints the value
and its count (frequency).</p>
  <p>We
saw earlier how the API models the search results on this site. Now
we can see how it models the facet results. One facet ("Category")
is represented by a <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/FacetResult.html">
FacetResult</a> object:</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot30.jpg"><img alt="Machine generated alternative text: CATEGORIES 4.—.- •FacetResult All categorIes [87] J Functìon pages [50) ¿ Userguides[12) Bkg posts [11)" src="/media/marklogic-for-java-developers_files/screenshot30.jpg" width="323" height="208"/></a></p>
  <p>And
its values are modeled by <a href="//docs.marklogic.com/javadoc/client/index.html?com/marklogic/client/query/FacetValue.html">
FacetValue</a> objects:</p>
  <p><a rel="detail" href="/media/marklogic-for-java-developers_files/screenshot31.jpg"><img alt="Machine generated alternative text: CATEGORIES Facet Valuefl All categorIes [87] Functìon pages  I Userguides[12) 1" src="/media/marklogic-for-java-developers_files/screenshot31.jpg" width="323" height="206"/></a></p>

  <p>When
a user clicks on one of these values, it takes them to a new
automatically constrained search results page. For example, if they
click "Blog posts," it will re-run their search with the additional
constraint "category:blog".</p>
</ml:page>